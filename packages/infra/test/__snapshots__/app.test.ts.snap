// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot tests Backend stack matches snapshot 1`] = `
{
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "CountBucketsTable09F12BD0": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "N",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH",
          },
        ],
        "TableName": "TestBackendStack-CountBucketsTable",
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "CreateShortUrlLambda8EAB433A": {
      "DependsOn": [
        "CreateShortUrlLambdaServiceRoleDefaultPolicy1D5B5086",
        "CreateShortUrlLambdaServiceRole05A03927",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[S3 KEY]",
        },
        "Environment": {
          "Variables": {
            "COUNT_BUCKETS_TABLE_NAME": {
              "Ref": "CountBucketsTable09F12BD0",
            },
            "URLS_TABLE_NAME": {
              "Ref": "UrlsTable60368425",
            },
          },
        },
        "FunctionName": "TestBackendStack-CreateShortUrlLambda",
        "Handler": "index.handler",
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "CreateShortUrlLambdaLogGroup6C68F8CF",
          },
        },
        "Role": {
          "Fn::GetAtt": [
            "CreateShortUrlLambdaServiceRole05A03927",
            "Arn",
          ],
        },
        "Runtime": "provided.al2023",
      },
      "Type": "AWS::Lambda::Function",
    },
    "CreateShortUrlLambdaLogGroup6C68F8CF": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": "/aws/lambda/TestBackendStack-CreateShortUrlLambda",
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CreateShortUrlLambdaServiceRole05A03927": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CreateShortUrlLambdaServiceRoleDefaultPolicy1D5B5086": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:ConditionCheckItem",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CountBucketsTable09F12BD0",
                    "Arn",
                  ],
                },
                {
                  "Fn::GetAtt": [
                    "UrlsTable60368425",
                    "Arn",
                  ],
                },
              ],
            },
            {
              "Action": "cloudwatch:PutMetricData",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CreateShortUrlLambdaServiceRoleDefaultPolicy1D5B5086",
        "Roles": [
          {
            "Ref": "CreateShortUrlLambdaServiceRole05A03927",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CreateShortUrlLambdaWarmingRule75FFEA04": {
      "Properties": {
        "Description": {
          "Fn::Join": [
            "",
            [
              "Warming rule for ",
              {
                "Ref": "CreateShortUrlLambda8EAB433A",
              },
            ],
          ],
        },
        "ScheduleExpression": "rate(5 minutes)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "CreateShortUrlLambda8EAB433A",
                "Arn",
              ],
            },
            "Id": "Target0",
            "Input": "{"warming":true}",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CreateShortUrlLambdaWarmingRuleAllowEventRuleTestBackendStackCreateShortUrlLambdaD129AA37DDDCA692": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateShortUrlLambda8EAB433A",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CreateShortUrlLambdaWarmingRule75FFEA04",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "GetLongUrlLambda1C69761E": {
      "DependsOn": [
        "GetLongUrlLambdaServiceRoleDefaultPolicyA405D6BA",
        "GetLongUrlLambdaServiceRole6B2DF149",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[S3 KEY]",
        },
        "Environment": {
          "Variables": {
            "ANALYTICS_FIREHOSE_STREAM_NAME": "TestBackendStack-UrlAnalyticsFirehose",
            "URLS_TABLE_NAME": {
              "Ref": "UrlsTable60368425",
            },
          },
        },
        "FunctionName": "TestBackendStack-GetLongUrlLambda",
        "Handler": "index.handler",
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "GetLongUrlLambdaLogGroupAC3AA164",
          },
        },
        "Role": {
          "Fn::GetAtt": [
            "GetLongUrlLambdaServiceRole6B2DF149",
            "Arn",
          ],
        },
        "Runtime": "provided.al2023",
      },
      "Type": "AWS::Lambda::Function",
    },
    "GetLongUrlLambdaLogGroupAC3AA164": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": "/aws/lambda/TestBackendStack-GetLongUrlLambda",
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "GetLongUrlLambdaServiceRole6B2DF149": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "GetLongUrlLambdaServiceRoleDefaultPolicyA405D6BA": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "dynamodb:GetItem",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "UrlsTable60368425",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "firehose:PutRecord",
                "firehose:PutRecordBatch",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "UrlAnalyticsAggregatorUrlAnalyticsFirehoseB53E5A44",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ssm:GetParameter",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/prod/salt",
                  ],
                ],
              },
            },
            {
              "Action": "cloudwatch:PutMetricData",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GetLongUrlLambdaServiceRoleDefaultPolicyA405D6BA",
        "Roles": [
          {
            "Ref": "GetLongUrlLambdaServiceRole6B2DF149",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "GetLongUrlLambdaWarmingRule95F8EFD9": {
      "Properties": {
        "Description": {
          "Fn::Join": [
            "",
            [
              "Warming rule for ",
              {
                "Ref": "GetLongUrlLambda1C69761E",
              },
            ],
          ],
        },
        "ScheduleExpression": "rate(5 minutes)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "GetLongUrlLambda1C69761E",
                "Arn",
              ],
            },
            "Id": "Target0",
            "Input": "{"warming":true}",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "GetLongUrlLambdaWarmingRuleAllowEventRuleTestBackendStackGetLongUrlLambda0D45BD487BA77012": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "GetLongUrlLambda1C69761E",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "GetLongUrlLambdaWarmingRule95F8EFD9",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "HttpAPI8D545486": {
      "Properties": {
        "CorsConfiguration": {
          "AllowCredentials": true,
          "AllowMethods": [
            "GET",
            "POST",
          ],
          "AllowOrigins": [
            "https://short.as",
            "https://www.short.as",
            "https://dev.short.as",
          ],
        },
        "Name": "TestBackendStack-HttpAPI",
        "ProtocolType": "HTTP",
      },
      "Type": "AWS::ApiGatewayV2::Api",
    },
    "HttpAPIDefaultStage1BC7D78F": {
      "Properties": {
        "ApiId": {
          "Ref": "HttpAPI8D545486",
        },
        "AutoDeploy": true,
        "StageName": "$default",
      },
      "Type": "AWS::ApiGatewayV2::Stage",
    },
    "HttpAPIGEToauthproxyA599B7BC": {
      "Properties": {
        "ApiId": {
          "Ref": "HttpAPI8D545486",
        },
        "AuthorizationType": "NONE",
        "RouteKey": "GET /oauth/{proxy+}",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "HttpAPIGEToauthproxyLambdaIntegration9E23C3F5",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "HttpAPIGEToauthproxyLambdaIntegration9E23C3F5": {
      "Properties": {
        "ApiId": {
          "Ref": "HttpAPI8D545486",
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "OAuthLambda5A654FC4",
            "Arn",
          ],
        },
        "PayloadFormatVersion": "2.0",
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "HttpAPIGEToauthproxyLambdaIntegrationPermission3970BAFE": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "OAuthLambda5A654FC4",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "HttpAPI8D545486",
              },
              "/*/*/oauth/{proxy+}",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "HttpAPIGETurlsproxy80590475": {
      "Properties": {
        "ApiId": {
          "Ref": "HttpAPI8D545486",
        },
        "AuthorizationType": "NONE",
        "RouteKey": "GET /urls/{proxy+}",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "HttpAPIGETurlsproxyLambdaIntegrationC9A6016C",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "HttpAPIGETurlsproxyLambdaIntegrationC9A6016C": {
      "Properties": {
        "ApiId": {
          "Ref": "HttpAPI8D545486",
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetLongUrlLambda1C69761E",
            "Arn",
          ],
        },
        "PayloadFormatVersion": "2.0",
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "HttpAPIGETurlsproxyLambdaIntegrationPermissionDB4DBF74": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "GetLongUrlLambda1C69761E",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "HttpAPI8D545486",
              },
              "/*/*/urls/{proxy+}",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "HttpAPIGETusersproxy939895B1": {
      "Properties": {
        "ApiId": {
          "Ref": "HttpAPI8D545486",
        },
        "AuthorizationType": "NONE",
        "RouteKey": "GET /users/{proxy+}",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "HttpAPIGETusersproxyLambdaIntegration5DC2900E",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "HttpAPIGETusersproxyLambdaIntegration5DC2900E": {
      "Properties": {
        "ApiId": {
          "Ref": "HttpAPI8D545486",
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UserAPIsLambda60578052",
            "Arn",
          ],
        },
        "PayloadFormatVersion": "2.0",
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "HttpAPIGETusersproxyLambdaIntegrationPermission2EDEACB9": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "UserAPIsLambda60578052",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "HttpAPI8D545486",
              },
              "/*/*/users/{proxy+}",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "HttpAPIPATCHusersproxy0FE7F906": {
      "Properties": {
        "ApiId": {
          "Ref": "HttpAPI8D545486",
        },
        "AuthorizationType": "NONE",
        "RouteKey": "PATCH /users/{proxy+}",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "HttpAPIGETusersproxyLambdaIntegration5DC2900E",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "HttpAPIPATCHusersproxyLambdaIntegrationPermission3A637719": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "UserAPIsLambda60578052",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "HttpAPI8D545486",
              },
              "/*/*/users/{proxy+}",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "HttpAPIPOSToauthproxy6FA50D3C": {
      "Properties": {
        "ApiId": {
          "Ref": "HttpAPI8D545486",
        },
        "AuthorizationType": "NONE",
        "RouteKey": "POST /oauth/{proxy+}",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "HttpAPIGEToauthproxyLambdaIntegration9E23C3F5",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "HttpAPIPOSToauthproxyLambdaIntegrationPermission5581014B": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "OAuthLambda5A654FC4",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "HttpAPI8D545486",
              },
              "/*/*/oauth/{proxy+}",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "HttpAPIPOSTurls3A623500": {
      "Properties": {
        "ApiId": {
          "Ref": "HttpAPI8D545486",
        },
        "AuthorizationType": "NONE",
        "RouteKey": "POST /urls",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "HttpAPIPOSTurlsLambdaIntegration0E4D2573",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "HttpAPIPOSTurlsLambdaIntegration0E4D2573": {
      "Properties": {
        "ApiId": {
          "Ref": "HttpAPI8D545486",
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateShortUrlLambda8EAB433A",
            "Arn",
          ],
        },
        "PayloadFormatVersion": "2.0",
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "HttpAPIPOSTurlsLambdaIntegrationPermissionD0C35046": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateShortUrlLambda8EAB433A",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "HttpAPI8D545486",
              },
              "/*/*/urls",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "HttpAPIPOSTusersproxyB7ACED1D": {
      "Properties": {
        "ApiId": {
          "Ref": "HttpAPI8D545486",
        },
        "AuthorizationType": "NONE",
        "RouteKey": "POST /users/{proxy+}",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "HttpAPIGETusersproxyLambdaIntegration5DC2900E",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "HttpAPIPOSTusersproxyLambdaIntegrationPermission4E6B84F9": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "UserAPIsLambda60578052",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "HttpAPI8D545486",
              },
              "/*/*/users/{proxy+}",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "OAuthLambda5A654FC4": {
      "DependsOn": [
        "OAuthLambdaServiceRoleDefaultPolicy6729CF8D",
        "OAuthLambdaServiceRole36582DA5",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[S3 KEY]",
        },
        "Environment": {
          "Variables": {
            "IS_PROD": "true",
            "USERS_TABLE_NAME": {
              "Ref": "UsersTable9725E9C8",
            },
          },
        },
        "FunctionName": "TestBackendStack-OAuthLambda",
        "Handler": "index.handler",
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "OAuthLambdaLogGroupB299A621",
          },
        },
        "Role": {
          "Fn::GetAtt": [
            "OAuthLambdaServiceRole36582DA5",
            "Arn",
          ],
        },
        "Runtime": "provided.al2023",
      },
      "Type": "AWS::Lambda::Function",
    },
    "OAuthLambdaLogGroupB299A621": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": "/aws/lambda/TestBackendStack-OAuthLambda",
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "OAuthLambdaServiceRole36582DA5": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "OAuthLambdaServiceRoleDefaultPolicy6729CF8D": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:ConditionCheckItem",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "UsersTable9725E9C8",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ssm:GetParameter",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/prod/oauth/*",
                  ],
                ],
              },
            },
            {
              "Action": "cloudwatch:PutMetricData",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OAuthLambdaServiceRoleDefaultPolicy6729CF8D",
        "Roles": [
          {
            "Ref": "OAuthLambdaServiceRole36582DA5",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OAuthLambdaWarmingRuleAllowEventRuleTestBackendStackOAuthLambdaCEAA9B8D17BFED91": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "OAuthLambda5A654FC4",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "OAuthLambdaWarmingRuleB8286C61",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "OAuthLambdaWarmingRuleB8286C61": {
      "Properties": {
        "Description": {
          "Fn::Join": [
            "",
            [
              "Warming rule for ",
              {
                "Ref": "OAuthLambda5A654FC4",
              },
            ],
          ],
        },
        "ScheduleExpression": "rate(5 minutes)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "OAuthLambda5A654FC4",
                "Arn",
              ],
            },
            "Id": "Target0",
            "Input": "{"warming":true}",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "UrlAnalyticsAggregatorUrlAnalyticsAggregatorLambda31B0391A": {
      "DependsOn": [
        "UrlAnalyticsAggregatorUrlAnalyticsAggregatorLambdaServiceRoleDefaultPolicyFC439BD3",
        "UrlAnalyticsAggregatorUrlAnalyticsAggregatorLambdaServiceRole7CC31995",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[S3 KEY]",
        },
        "Environment": {
          "Variables": {
            "URLS_TABLE_NAME": {
              "Ref": "UrlsTable60368425",
            },
          },
        },
        "FunctionName": "TestBackendStack-UrlAnalyticsAggregatorLambda",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "UrlAnalyticsAggregatorUrlAnalyticsAggregatorLambdaServiceRole7CC31995",
            "Arn",
          ],
        },
        "Runtime": "nodejs22.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "UrlAnalyticsAggregatorUrlAnalyticsAggregatorLambdaServiceRole7CC31995": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "UrlAnalyticsAggregatorUrlAnalyticsAggregatorLambdaServiceRoleDefaultPolicyFC439BD3": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "UrlsTable60368425",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "UrlsTable60368425",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "UrlAnalyticsAggregatorUrlAnalyticsAggregatorLambdaServiceRoleDefaultPolicyFC439BD3",
        "Roles": [
          {
            "Ref": "UrlAnalyticsAggregatorUrlAnalyticsAggregatorLambdaServiceRole7CC31995",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "UrlAnalyticsAggregatorUrlAnalyticsBucketE552D9B4": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": {
          "Fn::Join": [
            "",
            [
              "url-analytics-testbackendstack-",
              {
                "Ref": "AWS::AccountId",
              },
            ],
          ],
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "UrlAnalyticsAggregatorUrlAnalyticsDatabase7EEC8D49": {
      "Properties": {
        "CatalogId": {
          "Ref": "AWS::AccountId",
        },
        "DatabaseInput": {
          "Name": "url-analytics-database-testbackendstack",
        },
      },
      "Type": "AWS::Glue::Database",
    },
    "UrlAnalyticsAggregatorUrlAnalyticsFirehoseB53E5A44": {
      "Properties": {
        "DeliveryStreamName": "TestBackendStack-UrlAnalyticsFirehose",
        "ExtendedS3DestinationConfiguration": {
          "BucketARN": {
            "Fn::GetAtt": [
              "UrlAnalyticsAggregatorUrlAnalyticsBucketE552D9B4",
              "Arn",
            ],
          },
          "CloudWatchLoggingOptions": {
            "Enabled": true,
            "LogGroupName": {
              "Ref": "UrlAnalyticsAggregatorUrlAnalyticsFirehoseLogGroup49D7684E",
            },
            "LogStreamName": {
              "Ref": "UrlAnalyticsAggregatorUrlAnalyticsFirehoseLogStream626E253C",
            },
          },
          "DataFormatConversionConfiguration": {
            "Enabled": true,
            "InputFormatConfiguration": {
              "Deserializer": {
                "OpenXJsonSerDe": {},
              },
            },
            "OutputFormatConfiguration": {
              "Serializer": {
                "ParquetSerDe": {
                  "Compression": "SNAPPY",
                },
              },
            },
            "SchemaConfiguration": {
              "DatabaseName": {
                "Ref": "UrlAnalyticsAggregatorUrlAnalyticsDatabase7EEC8D49",
              },
              "RoleARN": {
                "Fn::GetAtt": [
                  "UrlAnalyticsAggregatorUrlAnalyticsFirehoseRoleC37BC263",
                  "Arn",
                ],
              },
              "TableName": {
                "Ref": "UrlAnalyticsAggregatorUrlAnalyticsTable5F85D559",
              },
            },
          },
          "DynamicPartitioningConfiguration": {
            "Enabled": true,
          },
          "ErrorOutputPrefix": "errors/",
          "Prefix": "year=!{partitionKeyFromQuery:year}/month=!{partitionKeyFromQuery:month}/day=!{partitionKeyFromQuery:day}/url_prefix_bucket=!{partitionKeyFromQuery:url_prefix_bucket}/",
          "ProcessingConfiguration": {
            "Enabled": true,
            "Processors": [
              {
                "Parameters": [
                  {
                    "ParameterName": "LambdaArn",
                    "ParameterValue": {
                      "Fn::GetAtt": [
                        "UrlAnalyticsAggregatorUrlAnalyticsAggregatorLambda31B0391A",
                        "Arn",
                      ],
                    },
                  },
                ],
                "Type": "Lambda",
              },
              {
                "Parameters": [
                  {
                    "ParameterName": "MetadataExtractionQuery",
                    "ParameterValue": "{year:.year,month:.month,day:.day,url_prefix_bucket:.url_prefix_bucket}",
                  },
                  {
                    "ParameterName": "JsonParsingEngine",
                    "ParameterValue": "JQ-1.6",
                  },
                ],
                "Type": "MetadataExtraction",
              },
            ],
          },
          "RoleARN": {
            "Fn::GetAtt": [
              "UrlAnalyticsAggregatorUrlAnalyticsFirehoseRoleC37BC263",
              "Arn",
            ],
          },
        },
      },
      "Type": "AWS::KinesisFirehose::DeliveryStream",
    },
    "UrlAnalyticsAggregatorUrlAnalyticsFirehoseLogGroup49D7684E": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": "/aws/kinesisfirehose/UrlAnalytics-TestBackendStack",
        "RetentionInDays": 60,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "UrlAnalyticsAggregatorUrlAnalyticsFirehoseLogStream626E253C": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": {
          "Ref": "UrlAnalyticsAggregatorUrlAnalyticsFirehoseLogGroup49D7684E",
        },
      },
      "Type": "AWS::Logs::LogStream",
      "UpdateReplacePolicy": "Retain",
    },
    "UrlAnalyticsAggregatorUrlAnalyticsFirehoseRoleC37BC263": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "firehose.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "s3:AbortMultipartUpload",
                    "s3:GetBucketLocation",
                    "s3:GetObject",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads",
                    "s3:PutObject",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "UrlAnalyticsAggregatorUrlAnalyticsBucketE552D9B4",
                        "Arn",
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::GetAtt": [
                              "UrlAnalyticsAggregatorUrlAnalyticsBucketE552D9B4",
                              "Arn",
                            ],
                          },
                          "/*",
                        ],
                      ],
                    },
                  ],
                },
                {
                  "Action": [
                    "glue:GetTable",
                    "glue:GetTableVersion",
                    "glue:GetTableVersions",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition",
                          },
                          ":glue:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":catalog",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition",
                          },
                          ":glue:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":database/",
                          {
                            "Ref": "UrlAnalyticsAggregatorUrlAnalyticsDatabase7EEC8D49",
                          },
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition",
                          },
                          ":glue:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":table/",
                          {
                            "Ref": "UrlAnalyticsAggregatorUrlAnalyticsDatabase7EEC8D49",
                          },
                          "/",
                          {
                            "Ref": "UrlAnalyticsAggregatorUrlAnalyticsTable5F85D559",
                          },
                        ],
                      ],
                    },
                  ],
                },
                {
                  "Action": [
                    "lambda:InvokeFunction",
                    "lambda:GetFunctionConfiguration",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::GetAtt": [
                      "UrlAnalyticsAggregatorUrlAnalyticsAggregatorLambda31B0391A",
                      "Arn",
                    ],
                  },
                },
                {
                  "Action": "logs:PutLogEvents",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::GetAtt": [
                      "UrlAnalyticsAggregatorUrlAnalyticsFirehoseLogGroup49D7684E",
                      "Arn",
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "FirehoseDeliveryPolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "UrlAnalyticsAggregatorUrlAnalyticsTable5F85D559": {
      "Properties": {
        "CatalogId": {
          "Ref": "AWS::AccountId",
        },
        "DatabaseName": {
          "Ref": "UrlAnalyticsAggregatorUrlAnalyticsDatabase7EEC8D49",
        },
        "TableInput": {
          "Description": "url-analytics-table-testbackendstack generated by CDK",
          "Name": "url-analytics-table-testbackendstack",
          "Parameters": {
            "classification": "parquet",
            "has_encrypted_data": true,
          },
          "PartitionKeys": [
            {
              "Name": "year",
              "Type": "string",
            },
            {
              "Name": "month",
              "Type": "string",
            },
            {
              "Name": "day",
              "Type": "string",
            },
            {
              "Name": "url_prefix_bucket",
              "Type": "string",
            },
          ],
          "StorageDescriptor": {
            "Columns": [
              {
                "Name": "short_url_id",
                "Type": "string",
              },
              {
                "Name": "timestamp",
                "Type": "timestamp",
              },
              {
                "Name": "user_agent",
                "Type": "string",
              },
              {
                "Name": "is_mobile",
                "Type": "boolean",
              },
              {
                "Name": "is_desktop",
                "Type": "boolean",
              },
              {
                "Name": "is_tablet",
                "Type": "boolean",
              },
              {
                "Name": "is_smart_tv",
                "Type": "boolean",
              },
              {
                "Name": "is_android",
                "Type": "boolean",
              },
              {
                "Name": "is_ios",
                "Type": "boolean",
              },
              {
                "Name": "country_code",
                "Type": "string",
              },
              {
                "Name": "country_name",
                "Type": "string",
              },
              {
                "Name": "region_code",
                "Type": "string",
              },
              {
                "Name": "region_name",
                "Type": "string",
              },
              {
                "Name": "city",
                "Type": "string",
              },
              {
                "Name": "postal_code",
                "Type": "string",
              },
              {
                "Name": "latitude",
                "Type": "double",
              },
              {
                "Name": "longitude",
                "Type": "double",
              },
              {
                "Name": "time_zone",
                "Type": "string",
              },
              {
                "Name": "ip_address_hash",
                "Type": "string",
              },
              {
                "Name": "asn",
                "Type": "string",
              },
              {
                "Name": "referer",
                "Type": "string",
              },
            ],
            "Compressed": true,
            "InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
            "Location": {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "UrlAnalyticsAggregatorUrlAnalyticsBucketE552D9B4",
                  },
                  "/",
                ],
              ],
            },
            "OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
            "Parameters": {
              "compression_type": "snappy",
            },
            "SerdeInfo": {
              "SerializationLibrary": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
            },
            "StoredAsSubDirectories": false,
          },
          "TableType": "EXTERNAL_TABLE",
        },
      },
      "Type": "AWS::Glue::Table",
    },
    "UrlsTable60368425": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "shortUrlId",
            "AttributeType": "S",
          },
          {
            "AttributeName": "owningUserId",
            "AttributeType": "S",
          },
          {
            "AttributeName": "createdTimestamp",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "GSI-owningUserId-createdTimestamp",
            "KeySchema": [
              {
                "AttributeName": "owningUserId",
                "KeyType": "HASH",
              },
              {
                "AttributeName": "createdTimestamp",
                "KeyType": "RANGE",
              },
            ],
            "Projection": {
              "ProjectionType": "ALL",
            },
          },
        ],
        "KeySchema": [
          {
            "AttributeName": "shortUrlId",
            "KeyType": "HASH",
          },
        ],
        "TableName": "TestBackendStack-UrlsTable",
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "UserAPIsLambda60578052": {
      "DependsOn": [
        "UserAPIsLambdaServiceRoleDefaultPolicy6E38C3E8",
        "UserAPIsLambdaServiceRoleD33633D8",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[S3 KEY]",
        },
        "Environment": {
          "Variables": {
            "COUNT_BUCKETS_TABLE_NAME": {
              "Ref": "CountBucketsTable09F12BD0",
            },
            "URLS_TABLE_NAME": {
              "Ref": "UrlsTable60368425",
            },
            "USERS_TABLE_NAME": {
              "Ref": "UsersTable9725E9C8",
            },
            "USER_ID_GSI_NAME": "GSI-owningUserId-createdTimestamp",
          },
        },
        "FunctionName": "TestBackendStack-UserAPIsLambda",
        "Handler": "index.handler",
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "UserAPIsLambdaLogGroup1D284038",
          },
        },
        "Role": {
          "Fn::GetAtt": [
            "UserAPIsLambdaServiceRoleD33633D8",
            "Arn",
          ],
        },
        "Runtime": "provided.al2023",
      },
      "Type": "AWS::Lambda::Function",
    },
    "UserAPIsLambdaLogGroup1D284038": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": "/aws/lambda/TestBackendStack-UserAPIsLambda",
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "UserAPIsLambdaServiceRoleD33633D8": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "UserAPIsLambdaServiceRoleDefaultPolicy6E38C3E8": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "dynamodb:GetItem",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "UsersTable9725E9C8",
                  "Arn",
                ],
              },
            },
            {
              "Action": "dynamodb:Query",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "UrlsTable60368425",
                        "Arn",
                      ],
                    },
                    "/index/GSI-owningUserId-createdTimestamp",
                  ],
                ],
              },
            },
            {
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:ConditionCheckItem",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CountBucketsTable09F12BD0",
                    "Arn",
                  ],
                },
                {
                  "Fn::GetAtt": [
                    "UrlsTable60368425",
                    "Arn",
                  ],
                },
                {
                  "Fn::GetAtt": [
                    "UsersTable9725E9C8",
                    "Arn",
                  ],
                },
              ],
            },
            {
              "Action": "ssm:GetParameter",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/prod/oauth/*",
                  ],
                ],
              },
            },
            {
              "Action": "cloudwatch:PutMetricData",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "UserAPIsLambdaServiceRoleDefaultPolicy6E38C3E8",
        "Roles": [
          {
            "Ref": "UserAPIsLambdaServiceRoleD33633D8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "UserAPIsLambdaWarmingRule1257B4B1": {
      "Properties": {
        "Description": {
          "Fn::Join": [
            "",
            [
              "Warming rule for ",
              {
                "Ref": "UserAPIsLambda60578052",
              },
            ],
          ],
        },
        "ScheduleExpression": "rate(5 minutes)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "UserAPIsLambda60578052",
                "Arn",
              ],
            },
            "Id": "Target0",
            "Input": "{"warming":true}",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "UserAPIsLambdaWarmingRuleAllowEventRuleTestBackendStackUserAPIsLambda067A17CAE4FF5F05": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "UserAPIsLambda60578052",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "UserAPIsLambdaWarmingRule1257B4B1",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "UsersTable9725E9C8": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH",
          },
        ],
        "TableName": "TestBackendStack-UsersTable",
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`Snapshot tests Website stack matches snapshot 1`] = `
{
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ApiRedirectFunctionc8ac49a71b70e8f94e35d7058e80417b45c0334fb712F63709": {
      "Properties": {
        "AutoPublish": true,
        "FunctionCode": "/**
 * Redirects https://short.as/api/* to APIGateway/* so that the API Gateway routes are called
 * correctly without the /api prefix
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
async function handler(event) {
  const request = event.request;
  // Strip the '/api' prefix
  request.uri = request.uri.replace(/^\\/api/, "");
  return request;
}
",
        "FunctionConfig": {
          "Comment": "ApiRedirectFunctionc8ac49a71b70e8f94e35d7058e80417b45c0334fb7",
          "Runtime": "cloudfront-js-2.0",
        },
        "Name": "ApiRedirectFunctionc8ac49a71b70e8f94e35d7058e80417b45c0334fb7",
      },
      "Type": "AWS::CloudFront::Function",
    },
    "Bucket83908E77": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "Tags": [
          {
            "Key": "aws-cdk:cr-owned:create/:0ebd2df5",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "BucketDeploymentAwsCliLayerB018DCE1": {
      "Properties": {
        "Content": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[S3 KEY]",
        },
        "Description": "/opt/awscli/aws",
      },
      "Type": "AWS::Lambda::LayerVersion",
    },
    "BucketDeploymentCustomResourceCB7E2133": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "DestinationBucketKeyPrefix": "create/",
        "DestinationBucketName": {
          "Ref": "Bucket83908E77",
        },
        "DistributionId": {
          "Ref": "Distribution830FAC52",
        },
        "OutputObjectKeys": true,
        "Prune": true,
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536",
            "Arn",
          ],
        },
        "SourceBucketNames": [
          {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
        ],
        "SourceObjectKeys": [
          "[S3 KEY]",
        ],
      },
      "Type": "Custom::CDKBucketDeployment",
      "UpdateReplacePolicy": "Delete",
    },
    "BucketPolicyE9A3008A": {
      "Properties": {
        "Bucket": {
          "Ref": "Bucket83908E77",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Principal": {
                "CanonicalUser": {
                  "Fn::GetAtt": [
                    "OriginAccessIdentityDF1E3CAC",
                    "S3CanonicalUserId",
                  ],
                },
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Bucket83908E77",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Bucket83908E77",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Principal": {
                "CanonicalUser": {
                  "Fn::GetAtt": [
                    "OriginAccessIdentityDF1E3CAC",
                    "S3CanonicalUserId",
                  ],
                },
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "Bucket83908E77",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536": {
      "DependsOn": [
        "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
        "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[S3 KEY]",
        },
        "Environment": {
          "Variables": {
            "AWS_CA_BUNDLE": "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem",
          },
        },
        "Handler": "index.handler",
        "Layers": [
          {
            "Ref": "BucketDeploymentAwsCliLayerB018DCE1",
          },
        ],
        "Role": {
          "Fn::GetAtt": [
            "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Bucket83908E77",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Bucket83908E77",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "cloudfront:GetInvalidation",
                "cloudfront:CreateInvalidation",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
        "Roles": [
          {
            "Ref": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "Distribution830FAC52": {
      "Properties": {
        "DistributionConfig": {
          "Aliases": [
            "short.as",
            "www.short.as",
          ],
          "CacheBehaviors": [
            {
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "Compress": true,
              "FunctionAssociations": [
                {
                  "EventType": "viewer-request",
                  "FunctionARN": {
                    "Fn::GetAtt": [
                      "HtmlRedirectFunctionc8ac49a71b70e8f94e35d7058e80417b45c0334fb738660F52",
                      "FunctionARN",
                    ],
                  },
                },
              ],
              "PathPattern": "/create*",
              "TargetOriginId": "TestWebsiteStackDistributionOrigin2E75A6923",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            {
              "AllowedMethods": [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
              "Compress": true,
              "FunctionAssociations": [
                {
                  "EventType": "viewer-request",
                  "FunctionARN": {
                    "Fn::GetAtt": [
                      "ApiRedirectFunctionc8ac49a71b70e8f94e35d7058e80417b45c0334fb712F63709",
                      "FunctionARN",
                    ],
                  },
                },
              ],
              "OriginRequestPolicyId": "b689b0a8-53d0-40ab-baf2-68738e2966ac",
              "PathPattern": "/api/*",
              "TargetOriginId": "TestWebsiteStackDistributionOrigin34C5B183F",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
          ],
          "CustomErrorResponses": [
            {
              "ErrorCode": 404,
              "ResponseCode": 404,
              "ResponsePagePath": "/create/404.html",
            },
          ],
          "DefaultCacheBehavior": {
            "AllowedMethods": [
              "GET",
              "HEAD",
              "OPTIONS",
              "PUT",
              "PATCH",
              "POST",
              "DELETE",
            ],
            "CachePolicyId": "4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
            "Compress": true,
            "FunctionAssociations": [
              {
                "EventType": "viewer-request",
                "FunctionARN": {
                  "Fn::GetAtt": [
                    "RootRedirectFunctionc8ac49a71b70e8f94e35d7058e80417b45c0334fb7F8ADA6BC",
                    "FunctionARN",
                  ],
                },
              },
            ],
            "TargetOriginId": "TestWebsiteStackDistributionOrigin1F299B5C8",
            "ViewerProtocolPolicy": "redirect-to-https",
          },
          "Enabled": true,
          "HttpVersion": "http2",
          "IPV6Enabled": true,
          "Origins": [
            {
              "CustomOriginConfig": {
                "OriginProtocolPolicy": "https-only",
                "OriginSSLProtocols": [
                  "TLSv1.2",
                ],
              },
              "DomainName": {
                "Fn::Select": [
                  2,
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Fn::Join": [
                          "",
                          [
                            "https://",
                            {
                              "Fn::ImportValue": "TestBackendStack:ExportsOutputRefHttpAPI8D545486FD78B06F",
                            },
                            ".execute-api.",
                            {
                              "Ref": "AWS::Region",
                            },
                            ".",
                            {
                              "Ref": "AWS::URLSuffix",
                            },
                            "/",
                          ],
                        ],
                      },
                    ],
                  },
                ],
              },
              "Id": "TestWebsiteStackDistributionOrigin1F299B5C8",
              "OriginPath": "/urls",
            },
            {
              "DomainName": {
                "Fn::GetAtt": [
                  "Bucket83908E77",
                  "RegionalDomainName",
                ],
              },
              "Id": "TestWebsiteStackDistributionOrigin2E75A6923",
              "S3OriginConfig": {
                "OriginAccessIdentity": {
                  "Fn::Join": [
                    "",
                    [
                      "origin-access-identity/cloudfront/",
                      {
                        "Ref": "OriginAccessIdentityDF1E3CAC",
                      },
                    ],
                  ],
                },
              },
            },
            {
              "CustomOriginConfig": {
                "OriginProtocolPolicy": "https-only",
                "OriginSSLProtocols": [
                  "TLSv1.2",
                ],
              },
              "DomainName": {
                "Fn::Select": [
                  2,
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Fn::Join": [
                          "",
                          [
                            "https://",
                            {
                              "Fn::ImportValue": "TestBackendStack:ExportsOutputRefHttpAPI8D545486FD78B06F",
                            },
                            ".execute-api.",
                            {
                              "Ref": "AWS::Region",
                            },
                            ".",
                            {
                              "Ref": "AWS::URLSuffix",
                            },
                            "/",
                          ],
                        ],
                      },
                    ],
                  },
                ],
              },
              "Id": "TestWebsiteStackDistributionOrigin34C5B183F",
            },
          ],
        },
      },
      "Type": "AWS::CloudFront::Distribution",
    },
    "HtmlRedirectFunctionc8ac49a71b70e8f94e35d7058e80417b45c0334fb738660F52": {
      "Properties": {
        "AutoPublish": true,
        "FunctionCode": "/**
 * Redirects the following:
 * - https://short.as/create -> https://short.as/create/index.html
 * - https://short.as/create/folder/ -> https://short.as/create/folder/index.html
 * - https://short.as/create/page -> https://short.as/create/page.html
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
async function handler(event) {
  const request = event.request;

  if (request.uri === "/create") {
    request.uri += "/index.html";
  } else if (request.uri.endsWith("/")) {
    request.uri += "index.html";
  } else if (!request.uri.includes(".")) {
    request.uri += ".html";
  }

  return request;
}
",
        "FunctionConfig": {
          "Comment": "HtmlRedirectFunctionc8ac49a71b70e8f94e35d7058e80417b45c0334fb7",
          "Runtime": "cloudfront-js-2.0",
        },
        "Name": "HtmlRedirectFunctionc8ac49a71b70e8f94e35d7058e80417b45c0334fb7",
      },
      "Type": "AWS::CloudFront::Function",
    },
    "OriginAccessIdentityDF1E3CAC": {
      "Properties": {
        "CloudFrontOriginAccessIdentityConfig": {
          "Comment": "Allows CloudFront to reach the bucket",
        },
      },
      "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
    },
    "RootRedirectFunctionc8ac49a71b70e8f94e35d7058e80417b45c0334fb7F8ADA6BC": {
      "Properties": {
        "AutoPublish": true,
        "FunctionCode": "/**
 * Redirects the following:
 * - https://short.as/ -> https://short.as/create so that CloudFront redirects to the S3 website
 * - https://short.as/aaaaaaa/ -> https://short.as/aaaaaaa so that CloudFront calls the \`get-long-url\` API correctly
 * - https://short.as/some-value -> https://short.as/create/some-value (if some-value is not of length 7 or contains
 * something other than lower and uppercase letters) so that CloudFront redirects to the S3 website
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
async function handler(event) {
  const request = event.request;
  const host = request.headers.host.value;
  const websitePrefix = "create";

  if (request.uri === "/") {
    return {
      statusCode: 302,
      statusDescription: "Found",
      // TODO: when we update the CloudFront distribution so that S3 is the default,
      // TODO: this can be changed to just /shorten
      headers: { location: { value: \`https://\${host}/\${websitePrefix}/shorten\` } },
    };
  }

  if (request.uri.endsWith("/")) {
    request.uri = request.uri.slice(0, -1);
  }

  // Short URL IDs are of length 7 and contain only lower and uppercase letters,
  // so we redirect any differently shaped URIs to the S3 website. Note that the
  // redirect URI starts with a "/" so we expect that before the 7 characters.
  if (!/^\\/[A-Za-z]{7}$/.test(request.uri)) {
    return {
      statusCode: 302,
      statusDescription: "Found",
      headers: { location: { value: \`https://\${host}/\${websitePrefix}\${request.uri}\` } },
    };
  }

  return request;
}
",
        "FunctionConfig": {
          "Comment": "RootRedirectFunctionc8ac49a71b70e8f94e35d7058e80417b45c0334fb7",
          "Runtime": "cloudfront-js-2.0",
        },
        "Name": "RootRedirectFunctionc8ac49a71b70e8f94e35d7058e80417b45c0334fb7",
      },
      "Type": "AWS::CloudFront::Function",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
