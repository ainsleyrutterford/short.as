// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot tests Backend stack matches snapshot 1`] = `
{
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "CountBucketsTable09F12BD0": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "N",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH",
          },
        ],
        "TableName": "TestBackendStack-CountBucketsTable",
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "CreateShortUrlLambda0AED869B": {
      "DependsOn": [
        "CreateShortUrlLambdaServiceRoleDefaultPolicy64776861",
        "CreateShortUrlLambdaServiceRole009F038F",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[S3 KEY]",
        },
        "Environment": {
          "Variables": {
            "COUNT_BUCKETS_TABLE_NAME": {
              "Ref": "CountBucketsTable09F12BD0",
            },
            "URLS_TABLE_NAME": {
              "Ref": "UrlsTable60368425",
            },
          },
        },
        "FunctionName": "TestBackendStack-CreateShortUrlLambda",
        "Handler": "index.createShortUrlHandler",
        "Role": {
          "Fn::GetAtt": [
            "CreateShortUrlLambdaServiceRole009F038F",
            "Arn",
          ],
        },
        "Runtime": "provided.al2023",
      },
      "Type": "AWS::Lambda::Function",
    },
    "CreateShortUrlLambdaServiceRole009F038F": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CreateShortUrlLambdaServiceRoleDefaultPolicy64776861": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:ConditionCheckItem",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CountBucketsTable09F12BD0",
                    "Arn",
                  ],
                },
                {
                  "Fn::GetAtt": [
                    "UrlsTable60368425",
                    "Arn",
                  ],
                },
              ],
            },
            {
              "Action": "cloudwatch:PutMetricData",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CreateShortUrlLambdaServiceRoleDefaultPolicy64776861",
        "Roles": [
          {
            "Ref": "CreateShortUrlLambdaServiceRole009F038F",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CreateShortUrlLambdaWarmingRuleAllowEventRuleTestBackendStackCreateShortUrlLambdaCA169B5AABC6240B": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateShortUrlLambda0AED869B",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CreateShortUrlLambdaWarmingRuleB803B886",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "CreateShortUrlLambdaWarmingRuleB803B886": {
      "Properties": {
        "Description": {
          "Fn::Join": [
            "",
            [
              "Warming rule for ",
              {
                "Ref": "CreateShortUrlLambda0AED869B",
              },
            ],
          ],
        },
        "ScheduleExpression": "rate(5 minutes)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "CreateShortUrlLambda0AED869B",
                "Arn",
              ],
            },
            "Id": "Target0",
            "Input": "{"warming":true}",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "GetLongUrlDetailsLambda3B6B278A": {
      "DependsOn": [
        "GetLongUrlDetailsLambdaServiceRoleDefaultPolicyE8B99266",
        "GetLongUrlDetailsLambdaServiceRoleD4E13140",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[S3 KEY]",
        },
        "Environment": {
          "Variables": {
            "URLS_TABLE_NAME": {
              "Ref": "UrlsTable60368425",
            },
          },
        },
        "FunctionName": "TestBackendStack-GetLongUrlDetailsLambda",
        "Handler": "index.getLongUrlDetailsHandler",
        "Role": {
          "Fn::GetAtt": [
            "GetLongUrlDetailsLambdaServiceRoleD4E13140",
            "Arn",
          ],
        },
        "Runtime": "provided.al2023",
      },
      "Type": "AWS::Lambda::Function",
    },
    "GetLongUrlDetailsLambdaServiceRoleD4E13140": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "GetLongUrlDetailsLambdaServiceRoleDefaultPolicyE8B99266": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:ConditionCheckItem",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "UrlsTable60368425",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GetLongUrlDetailsLambdaServiceRoleDefaultPolicyE8B99266",
        "Roles": [
          {
            "Ref": "GetLongUrlDetailsLambdaServiceRoleD4E13140",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "GetLongUrlLambdaC5112ECB": {
      "DependsOn": [
        "GetLongUrlLambdaServiceRoleDefaultPolicy0DF8ACD8",
        "GetLongUrlLambdaServiceRole025A1693",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[S3 KEY]",
        },
        "Environment": {
          "Variables": {
            "URLS_TABLE_NAME": {
              "Ref": "UrlsTable60368425",
            },
          },
        },
        "FunctionName": "TestBackendStack-GetLongUrlLambda",
        "Handler": "index.getLongUrlHandler",
        "Role": {
          "Fn::GetAtt": [
            "GetLongUrlLambdaServiceRole025A1693",
            "Arn",
          ],
        },
        "Runtime": "provided.al2023",
      },
      "Type": "AWS::Lambda::Function",
    },
    "GetLongUrlLambdaServiceRole025A1693": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "GetLongUrlLambdaServiceRoleDefaultPolicy0DF8ACD8": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:ConditionCheckItem",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "UrlsTable60368425",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GetLongUrlLambdaServiceRoleDefaultPolicy0DF8ACD8",
        "Roles": [
          {
            "Ref": "GetLongUrlLambdaServiceRole025A1693",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "GetLongUrlLambdaWarmingRule8130972C": {
      "Properties": {
        "Description": {
          "Fn::Join": [
            "",
            [
              "Warming rule for ",
              {
                "Ref": "GetLongUrlLambdaC5112ECB",
              },
            ],
          ],
        },
        "ScheduleExpression": "rate(5 minutes)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "GetLongUrlLambdaC5112ECB",
                "Arn",
              ],
            },
            "Id": "Target0",
            "Input": "{"warming":true}",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "GetLongUrlLambdaWarmingRuleAllowEventRuleTestBackendStackGetLongUrlLambdaCE717209AFA84177": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "GetLongUrlLambdaC5112ECB",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "GetLongUrlLambdaWarmingRule8130972C",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "HttpAPI8D545486": {
      "Properties": {
        "CorsConfiguration": {
          "AllowCredentials": true,
          "AllowMethods": [
            "GET",
            "POST",
          ],
          "AllowOrigins": [
            "https://short.as",
            "https://www.short.as",
            "https://dev.short.as",
          ],
        },
        "Name": "TestBackendStack-HttpAPI",
        "ProtocolType": "HTTP",
      },
      "Type": "AWS::ApiGatewayV2::Api",
    },
    "HttpAPIDefaultStage1BC7D78F": {
      "Properties": {
        "ApiId": {
          "Ref": "HttpAPI8D545486",
        },
        "AutoDeploy": true,
        "StageName": "$default",
      },
      "Type": "AWS::ApiGatewayV2::Stage",
    },
    "HttpAPIGETgetlongurldetailsshortUrlIdA2D44D6B": {
      "Properties": {
        "ApiId": {
          "Ref": "HttpAPI8D545486",
        },
        "AuthorizationType": "NONE",
        "RouteKey": "GET /get-long-url-details/{shortUrlId}",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "HttpAPIGETgetlongurldetailsshortUrlIdGetLongUrlDetailsLambdaIntegrationCAE9D52F",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "HttpAPIGETgetlongurldetailsshortUrlIdGetLongUrlDetailsLambdaIntegrationCAE9D52F": {
      "Properties": {
        "ApiId": {
          "Ref": "HttpAPI8D545486",
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetLongUrlDetailsLambda3B6B278A",
            "Arn",
          ],
        },
        "PayloadFormatVersion": "2.0",
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "HttpAPIGETgetlongurldetailsshortUrlIdGetLongUrlDetailsLambdaIntegrationPermissionB0B6E88C": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "GetLongUrlDetailsLambda3B6B278A",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "HttpAPI8D545486",
              },
              "/*/*/get-long-url-details/{shortUrlId}",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "HttpAPIGETgetlongurlshortUrlIdA24C2A64": {
      "Properties": {
        "ApiId": {
          "Ref": "HttpAPI8D545486",
        },
        "AuthorizationType": "NONE",
        "RouteKey": "GET /get-long-url/{shortUrlId}",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "HttpAPIGETgetlongurlshortUrlIdGetLongUrlLambdaIntegrationF0B88EFF",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "HttpAPIGETgetlongurlshortUrlIdGetLongUrlLambdaIntegrationF0B88EFF": {
      "Properties": {
        "ApiId": {
          "Ref": "HttpAPI8D545486",
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetLongUrlLambdaC5112ECB",
            "Arn",
          ],
        },
        "PayloadFormatVersion": "2.0",
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "HttpAPIGETgetlongurlshortUrlIdGetLongUrlLambdaIntegrationPermission117D995A": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "GetLongUrlLambdaC5112ECB",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "HttpAPI8D545486",
              },
              "/*/*/get-long-url/{shortUrlId}",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "HttpAPIGEToauthproxyA599B7BC": {
      "Properties": {
        "ApiId": {
          "Ref": "HttpAPI8D545486",
        },
        "AuthorizationType": "NONE",
        "RouteKey": "GET /oauth/{proxy+}",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "HttpAPIGEToauthproxyOAuthLambdaIntegrationC97BA312",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "HttpAPIGEToauthproxyOAuthLambdaIntegrationC97BA312": {
      "Properties": {
        "ApiId": {
          "Ref": "HttpAPI8D545486",
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "OAuthLambda063A5DDC",
            "Arn",
          ],
        },
        "PayloadFormatVersion": "2.0",
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "HttpAPIGEToauthproxyOAuthLambdaIntegrationPermission9253165E": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "OAuthLambda063A5DDC",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "HttpAPI8D545486",
              },
              "/*/*/oauth/{proxy+}",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "HttpAPIPOSTcreateshorturlCreateShortUrlLambdaIntegration86374E1F": {
      "Properties": {
        "ApiId": {
          "Ref": "HttpAPI8D545486",
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateShortUrlLambda0AED869B",
            "Arn",
          ],
        },
        "PayloadFormatVersion": "2.0",
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "HttpAPIPOSTcreateshorturlCreateShortUrlLambdaIntegrationPermissionF47EDEC2": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateShortUrlLambda0AED869B",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "HttpAPI8D545486",
              },
              "/*/*/create-short-url",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "HttpAPIPOSTcreateshorturlF335CED1": {
      "Properties": {
        "ApiId": {
          "Ref": "HttpAPI8D545486",
        },
        "AuthorizationType": "NONE",
        "RouteKey": "POST /create-short-url",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "HttpAPIPOSTcreateshorturlCreateShortUrlLambdaIntegration86374E1F",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "OAuthLambda063A5DDC": {
      "DependsOn": [
        "OAuthLambdaServiceRoleDefaultPolicyA43A0D2D",
        "OAuthLambdaServiceRole8CEB87E6",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[S3 KEY]",
        },
        "Environment": {
          "Variables": {
            "IS_PROD": "true",
            "USERS_TABLE_NAME": {
              "Ref": "UsersTable9725E9C8",
            },
          },
        },
        "FunctionName": "TestBackendStack-OAuthLambda",
        "Handler": "index.oAuthHandler",
        "Role": {
          "Fn::GetAtt": [
            "OAuthLambdaServiceRole8CEB87E6",
            "Arn",
          ],
        },
        "Runtime": "provided.al2023",
      },
      "Type": "AWS::Lambda::Function",
    },
    "OAuthLambdaServiceRole8CEB87E6": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "OAuthLambdaServiceRoleDefaultPolicyA43A0D2D": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:ConditionCheckItem",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "UsersTable9725E9C8",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ssm:GetParameter",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/prod/oauth/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "OAuthLambdaServiceRoleDefaultPolicyA43A0D2D",
        "Roles": [
          {
            "Ref": "OAuthLambdaServiceRole8CEB87E6",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "UrlsTable60368425": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "shortUrlId",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "shortUrlId",
            "KeyType": "HASH",
          },
        ],
        "TableName": "TestBackendStack-UrlsTable",
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "UsersTable9725E9C8": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH",
          },
        ],
        "TableName": "TestBackendStack-UsersTable",
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`Snapshot tests Website stack matches snapshot 1`] = `
{
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ApiRedirectFunctionc8ac49a71b70e8f94e35d7058e80417b45c0334fb712F63709": {
      "Properties": {
        "AutoPublish": true,
        "FunctionCode": "/**
 * Redirects https://short.as/api/* to APIGateway/* so that the API Gateway routes are called
 * correctly without the /api prefix
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
async function handler(event) {
  const request = event.request;
  // Strip the '/api' prefix
  request.uri = request.uri.replace(/^\\/api/, "");
  return request;
}
",
        "FunctionConfig": {
          "Comment": "ApiRedirectFunctionc8ac49a71b70e8f94e35d7058e80417b45c0334fb7",
          "Runtime": "cloudfront-js-2.0",
        },
        "Name": "ApiRedirectFunctionc8ac49a71b70e8f94e35d7058e80417b45c0334fb7",
      },
      "Type": "AWS::CloudFront::Function",
    },
    "Bucket83908E77": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "Tags": [
          {
            "Key": "aws-cdk:cr-owned:create/:0ebd2df5",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "BucketDeploymentAwsCliLayerB018DCE1": {
      "Properties": {
        "Content": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[S3 KEY]",
        },
        "Description": "/opt/awscli/aws",
      },
      "Type": "AWS::Lambda::LayerVersion",
    },
    "BucketDeploymentCustomResourceCB7E2133": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "DestinationBucketKeyPrefix": "create/",
        "DestinationBucketName": {
          "Ref": "Bucket83908E77",
        },
        "DistributionId": {
          "Ref": "Distribution830FAC52",
        },
        "Prune": true,
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536",
            "Arn",
          ],
        },
        "SourceBucketNames": [
          {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
        ],
        "SourceObjectKeys": [
          "[S3 KEY]",
        ],
      },
      "Type": "Custom::CDKBucketDeployment",
      "UpdateReplacePolicy": "Delete",
    },
    "BucketPolicyE9A3008A": {
      "Properties": {
        "Bucket": {
          "Ref": "Bucket83908E77",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Principal": {
                "CanonicalUser": {
                  "Fn::GetAtt": [
                    "OriginAccessIdentityDF1E3CAC",
                    "S3CanonicalUserId",
                  ],
                },
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Bucket83908E77",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Bucket83908E77",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Principal": {
                "CanonicalUser": {
                  "Fn::GetAtt": [
                    "OriginAccessIdentityDF1E3CAC",
                    "S3CanonicalUserId",
                  ],
                },
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "Bucket83908E77",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536": {
      "DependsOn": [
        "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
        "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[S3 KEY]",
        },
        "Environment": {
          "Variables": {
            "AWS_CA_BUNDLE": "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem",
          },
        },
        "Handler": "index.handler",
        "Layers": [
          {
            "Ref": "BucketDeploymentAwsCliLayerB018DCE1",
          },
        ],
        "Role": {
          "Fn::GetAtt": [
            "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Bucket83908E77",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Bucket83908E77",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "cloudfront:GetInvalidation",
                "cloudfront:CreateInvalidation",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
        "Roles": [
          {
            "Ref": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "Distribution830FAC52": {
      "Properties": {
        "DistributionConfig": {
          "Aliases": [
            "short.as",
            "www.short.as",
          ],
          "CacheBehaviors": [
            {
              "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
              "Compress": true,
              "FunctionAssociations": [
                {
                  "EventType": "viewer-request",
                  "FunctionARN": {
                    "Fn::GetAtt": [
                      "HtmlRedirectFunctionc8ac49a71b70e8f94e35d7058e80417b45c0334fb738660F52",
                      "FunctionARN",
                    ],
                  },
                },
              ],
              "PathPattern": "/create*",
              "TargetOriginId": "TestWebsiteStackDistributionOrigin2E75A6923",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
            {
              "AllowedMethods": [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": "4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
              "Compress": true,
              "FunctionAssociations": [
                {
                  "EventType": "viewer-request",
                  "FunctionARN": {
                    "Fn::GetAtt": [
                      "ApiRedirectFunctionc8ac49a71b70e8f94e35d7058e80417b45c0334fb712F63709",
                      "FunctionARN",
                    ],
                  },
                },
              ],
              "OriginRequestPolicyId": "b689b0a8-53d0-40ab-baf2-68738e2966ac",
              "PathPattern": "/api/*",
              "TargetOriginId": "TestWebsiteStackDistributionOrigin34C5B183F",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
          ],
          "CustomErrorResponses": [
            {
              "ErrorCode": 404,
              "ResponseCode": 404,
              "ResponsePagePath": "/create/404.html",
            },
          ],
          "DefaultCacheBehavior": {
            "AllowedMethods": [
              "GET",
              "HEAD",
              "OPTIONS",
              "PUT",
              "PATCH",
              "POST",
              "DELETE",
            ],
            "CachePolicyId": "4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
            "Compress": true,
            "FunctionAssociations": [
              {
                "EventType": "viewer-request",
                "FunctionARN": {
                  "Fn::GetAtt": [
                    "RootRedirectFunctionc8ac49a71b70e8f94e35d7058e80417b45c0334fb7F8ADA6BC",
                    "FunctionARN",
                  ],
                },
              },
            ],
            "TargetOriginId": "TestWebsiteStackDistributionOrigin1F299B5C8",
            "ViewerProtocolPolicy": "redirect-to-https",
          },
          "Enabled": true,
          "HttpVersion": "http2",
          "IPV6Enabled": true,
          "Origins": [
            {
              "CustomOriginConfig": {
                "OriginProtocolPolicy": "https-only",
                "OriginSSLProtocols": [
                  "TLSv1.2",
                ],
              },
              "DomainName": {
                "Fn::Select": [
                  2,
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Fn::Join": [
                          "",
                          [
                            "https://",
                            {
                              "Fn::ImportValue": "TestBackendStack:ExportsOutputRefHttpAPI8D545486FD78B06F",
                            },
                            ".execute-api.",
                            {
                              "Ref": "AWS::Region",
                            },
                            ".",
                            {
                              "Ref": "AWS::URLSuffix",
                            },
                            "/",
                          ],
                        ],
                      },
                    ],
                  },
                ],
              },
              "Id": "TestWebsiteStackDistributionOrigin1F299B5C8",
              "OriginPath": "/get-long-url",
            },
            {
              "DomainName": {
                "Fn::GetAtt": [
                  "Bucket83908E77",
                  "RegionalDomainName",
                ],
              },
              "Id": "TestWebsiteStackDistributionOrigin2E75A6923",
              "S3OriginConfig": {
                "OriginAccessIdentity": {
                  "Fn::Join": [
                    "",
                    [
                      "origin-access-identity/cloudfront/",
                      {
                        "Ref": "OriginAccessIdentityDF1E3CAC",
                      },
                    ],
                  ],
                },
              },
            },
            {
              "CustomOriginConfig": {
                "OriginProtocolPolicy": "https-only",
                "OriginSSLProtocols": [
                  "TLSv1.2",
                ],
              },
              "DomainName": {
                "Fn::Select": [
                  2,
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Fn::Join": [
                          "",
                          [
                            "https://",
                            {
                              "Fn::ImportValue": "TestBackendStack:ExportsOutputRefHttpAPI8D545486FD78B06F",
                            },
                            ".execute-api.",
                            {
                              "Ref": "AWS::Region",
                            },
                            ".",
                            {
                              "Ref": "AWS::URLSuffix",
                            },
                            "/",
                          ],
                        ],
                      },
                    ],
                  },
                ],
              },
              "Id": "TestWebsiteStackDistributionOrigin34C5B183F",
            },
          ],
        },
      },
      "Type": "AWS::CloudFront::Distribution",
    },
    "HtmlRedirectFunctionc8ac49a71b70e8f94e35d7058e80417b45c0334fb738660F52": {
      "Properties": {
        "AutoPublish": true,
        "FunctionCode": "/**
 * Redirects the following:
 * - https://short.as/create -> https://short.as/create/index.html
 * - https://short.as/create/folder/ -> https://short.as/create/folder/index.html
 * - https://short.as/create/page -> https://short.as/create/page.html
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
async function handler(event) {
  const request = event.request;

  if (request.uri === "/create") {
    request.uri += "/index.html";
  } else if (request.uri.endsWith("/")) {
    request.uri += "index.html";
  } else if (!request.uri.includes(".")) {
    request.uri += ".html";
  }

  return request;
}
",
        "FunctionConfig": {
          "Comment": "HtmlRedirectFunctionc8ac49a71b70e8f94e35d7058e80417b45c0334fb7",
          "Runtime": "cloudfront-js-2.0",
        },
        "Name": "HtmlRedirectFunctionc8ac49a71b70e8f94e35d7058e80417b45c0334fb7",
      },
      "Type": "AWS::CloudFront::Function",
    },
    "OriginAccessIdentityDF1E3CAC": {
      "Properties": {
        "CloudFrontOriginAccessIdentityConfig": {
          "Comment": "Allows CloudFront to reach the bucket",
        },
      },
      "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
    },
    "RootRedirectFunctionc8ac49a71b70e8f94e35d7058e80417b45c0334fb7F8ADA6BC": {
      "Properties": {
        "AutoPublish": true,
        "FunctionCode": "/**
 * Redirects the following:
 * - https://short.as/ -> https://short.as/create so that CloudFront redirects to the S3 website
 * - https://short.as/aaaaaaa/ -> https://short.as/aaaaaaa so that CloudFront calls the \`get-long-url\` API correctly
 * - https://short.as/some-value -> https://short.as/create/some-value (if some-value is not of length 7 or contains
 * something other than lower and uppercase letters) so that CloudFront redirects to the S3 website
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
async function handler(event) {
  const request = event.request;
  const host = request.headers.host.value;
  const websitePrefix = "create";

  if (request.uri === "/") {
    return {
      statusCode: 302,
      statusDescription: "Found",
      // TODO: when we update the CloudFront distribution so that S3 is the default,
      // TODO: this can be changed to just /shorten
      headers: { location: { value: \`https://\${host}/\${websitePrefix}/shorten\` } },
    };
  }

  if (request.uri.endsWith("/")) {
    request.uri = request.uri.slice(0, -1);
  }

  // Short URL IDs are of length 7 and contain only lower and uppercase letters,
  // so we redirect any differently shaped URIs to the S3 website. Note that the
  // redirect URI starts with a "/" so we expect that before the 7 characters.
  if (!/^\\/[A-Za-z]{7}$/.test(request.uri)) {
    return {
      statusCode: 302,
      statusDescription: "Found",
      headers: { location: { value: \`https://\${host}/\${websitePrefix}\${request.uri}\` } },
    };
  }

  return request;
}
",
        "FunctionConfig": {
          "Comment": "RootRedirectFunctionc8ac49a71b70e8f94e35d7058e80417b45c0334fb7",
          "Runtime": "cloudfront-js-2.0",
        },
        "Name": "RootRedirectFunctionc8ac49a71b70e8f94e35d7058e80417b45c0334fb7",
      },
      "Type": "AWS::CloudFront::Function",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
